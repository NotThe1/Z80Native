0001: 0100         ;     File created by MakeZ80Source on Wed Apr 03 09:56:26 EDT 2019 from:
0002: 0100         ;     C:\Z80_Native\Submit.asm
0003: 0100         ;Source File name - SUBMIT.COM
0004: 0100         ;Generated by - ManualDisassembler V A.0 on Tue Apr 02 16:43:38 EDT 2019
0005: 0100
0006: 0100             NULL       EQU    00H                  ; Null
0007: 0100             SOH        EQU    01H                  ; Start of Heading
0008: 0100             BELL       EQU    07H                  ; Bell
0009: 0100             LF         EQU    0AH                  ; Line Feed
0010: 0100             CR         EQU    0DH                  ; Carriage Return
0011: 0100             DOLLAR     EQU    24H                  ; Dollar Sign
0012: 0100             QMARK      EQU    3FH                  ; Question Mark
0013: 0100
0014: 0100             WBOOT      EQU    0000                 ; Vector to warm Boot
0015: 0100             BDOS       EQU    0005                 ; Vector to OS
0016: 0100             FCB1       EQU    05CH
0017: 0100             FCB1TYPE   EQU    065H                 ; Type in fcb1
0018: 0100             COMTAIL    EQU    080H
0019: 0100             COMTAILCOUNT EQU    COMTAIL
0020: 0100             COMTAILCHARS EQU    COMTAILCOUNT + 1
0021: 0100
0022: 0100             DMA        EQU    0080H                ; Default DMA address
0023: 0100             RECORDSIZE EQU    80H                  ; CPM record Size
0024: 0100
0025: 0100             scPrintString EQU    09H
0026: 0100             scOpenFile EQU    0FH
0027: 0100             scCloseFile EQU    10H
0028: 0100             scDeleteFile EQU    13H
0029: 0100             scReadSeq  EQU    14H
0030: 0100             scWriteSeq EQU    15H
0031: 0100             scMakeFile EQU    16H
0032: 0100
0033: 0100                        ORG    0100H
0034: 0100
0035: 0100
0036: 0100         ;     <New code fragment-----from 0100 to 0102 ( 102 :  258)>
0037: 0100         ;              ORG 0100H
0038: 0100 C3 DF 01               JP     Start
0039: 0103
0040: 0103         ;     <New unknown fragment-----from 0103 to 01DE ( 1DE :  478)>
0041: 0103         ;              ORG 0103H
0042: 0103         ;;               DS 0DCH
0043: 0103 20 63 6F 70 79 72 69 67 68 74 28 63 29 20 31 39 37 37 20 20 64 69 67 69 74 61 6C 20 72 65 73 65 61 72 63 68 20     msg0:      DB     ' copyright(c) 1977  digital research '
0044: 0128 0A 0D 24     LFCR:      DB     0AH,0DH,'$'
0045: 012B 45 72 72 6F 72 20 4F 6E 20 4C 69 6E 65 20 24     msg1:      DB     'Error On Line $'
0046: 013A 53 55 42     txtSUB:    DB     'SUB'
0047: 013D 4E 6F 20 20 53 55 42 20 20 46 69 6C 65 20 50 72 65 73 65 6E 74 24     msg2:      DB     'No  SUB  File Present$'
0048: 0153 44 69 73 6B 20 57 72 69 74 65 20 45 72 72 6F 72 24     msg3:      DB     'Disk Write Error$'
0049: 0164 43 6F 6D 6D 61 6E 64 20 42 75 66 66 65 72 20 4F 76 65 72 66 6C 6F 77 24     msg4:      DB     'Command Buffer Overflow$'
0050: 017C 43 6F 6D 6D 61 6E 64 20 54 6F 6F 20 4C 6F 6E 67 24     msg5:      DB     'Command Too Long$'
0051: 018D 50 61 72 61 6D 65 74 65 72 20 45 72 72 6F 72 24     msg6:      DB     'Parameter Error$'
0052: 019D 49 6E 76 61 6C 69 64 20 43 6F 6E 74 72 6F 6C 20 43 68 61 72 61 63 74 65 72 24     msg7:      DB     'Invalid Control Character$'
0053: 01B7 44 69 72 65 63 74 6F 72 79 20 46 75 6C 6C 24     msg8:      DB     'Directory Full$'
0054: 01C6 43 61 6E 6E 6F 74 20 43 6C 6F 73 65 20 20 52 65 61 64 2F 4F 6E 6C 79 3F 24     msg9:      DB     'Cannot Close  Read/Only?$'
0055: 01DF
0056: 01DF
0057: 01DF         ;              ORG 01DFH
0058: 01DF             Start:
0059: 01DF 21 00 00               LD     HL,000H
0060: 01E2 39                     ADD    HL,SP
0061: 01E3 22 F0 05               LD     (CallerSP),HL        ; Save callers SP
0062: 01E6 21 93 0E               LD     HL,TopOfStack
0063: 01E9 F9                     LD     SP,HL                ; Set our stack
0064: 01EA CD CC 02               CALL   GrabComTail          ; Save comtail & open SUB file
0065: 01ED CD 8A 03               CALL   038AH
0066: 01F0 CD FE 04               CALL   04FEH
0067: 01F3 CD 87 05               CALL   jpWBOOT
0068: 01F6 C9                     RET
0069: 01F7
0070: 01F7         ;              ORG  01F7H
0071: 01F7             printBC:
0072: 01F7 21 DD 05               LD     HL,05DDH             ; Set up HL to store BC
0073: 01FA 70                     LD     (HL),B               ; Save MSB of message pointer
0074: 01FB 2B                     DEC    HL
0075: 01FC 71                     LD     (HL),C               ; Save LSB of Message buffer
0076: 01FD 2A DC 05               LD     HL,(05DCH)           ; get what we just saved
0077: 0200 EB                     EX     DE,HL                ; put it into DE
0078: 0201 0E 09                  LD     C,scPrintString
0079: 0203 CD 8A 05               CALL   jpBDOS1              ; Go print it
0080: 0206 C9                     RET
0081: 0207
0082: 0207         ;              ORG  0207H
0083: 0207             openBC:
0084: 0207         ;Called with BC = FCB of file to open
0085: 0207 21 E0 05               LD     HL,05E0H             ; Set up HL to store BC
0086: 020A 70                     LD     (HL),B               ; Save MSB of FCB
0087: 020B 2B                     DEC    HL
0088: 020C 71                     LD     (HL),C               ; Save LSB of FCB
0089: 020D 2A DF 05               LD     HL,(05DFH)           ; get what we just saved
0090: 0210 EB                     EX     DE,HL                ; put it into DE
0091: 0211 0E 0F                  LD     C,scOpenFile
0092: 0213 CD 8D 05               CALL   jpBDOS2              ; Open the file
0093: 0216 32 DE 05               LD     (osStatus),A         ; Save the return status
0094: 0219 C9                     RET
0095: 021A
0096: 021A         ;     <New code fragment-----from 021A to 022C ( 22C :  556)>
0097: 021A         ;              ORG  021AH
0098: 021A             L021A:
0099: 021A 21 E2 05               LD     HL,05E2H
0100: 021D 70                     LD     (HL),B
0101: 021E 2B                     DEC    HL
0102: 021F 71                     LD     (HL),C
0103: 0220 2A E1 05               LD     HL,(05E1H)
0104: 0223 EB                     EX     DE,HL
0105: 0224 0E 10                  LD     C,scCloseFile
0106: 0226 CD 8D 05               CALL   jpBDOS2
0107: 0229 32 DE 05               LD     (osStatus),A
0108: 022C C9                     RET
0109: 022D
0110: 022D         ;     <New code fragment-----from 022D to 023C ( 23C :  572)>
0111: 022D         ;              ORG  022DH
0112: 022D             L022D:
0113: 022D 21 E4 05               LD     HL,05E4H
0114: 0230 70                     LD     (HL),B
0115: 0231 2B                     DEC    HL
0116: 0232 71                     LD     (HL),C
0117: 0233 2A E3 05               LD     HL,(05E3H)
0118: 0236 EB                     EX     DE,HL
0119: 0237 0E 13                  LD     C,scDeleteFile
0120: 0239 CD 8A 05               CALL   jpBDOS1
0121: 023C C9                     RET
0122: 023D
0123: 023D         ;              ORG  023DH
0124: 023D
0125: 023D             readSeq:
0126: 023D 21 E6 05               LD     HL,05E6H             ; Set up HL to store BC
0127: 0240 70                     LD     (HL),B               ; Save MSB of FCB1 pointer
0128: 0241 2B                     DEC    HL
0129: 0242 71                     LD     (HL),C               ; Save LSB of FCB1 buffer
0130: 0243 2A E5 05               LD     HL,(05E5H)           ; Get what we just saved
0131: 0246 EB                     EX     DE,HL                ; Put FCB in DE
0132: 0247 0E 14                  LD     C,scReadSeq
0133: 0249 CD 8D 05               CALL   jpBDOS2              ; Read next record
0134: 024C C9                     RET
0135: 024D
0136: 024D         ;     <New code fragment-----from 024D to 025C ( 25C :  604)>
0137: 024D         ;              ORG  024DH
0138: 024D             L024D:
0139: 024D 21 E8 05               LD     HL,05E8H
0140: 0250 70                     LD     (HL),B
0141: 0251 2B                     DEC    HL
0142: 0252 71                     LD     (HL),C
0143: 0253 2A E7 05               LD     HL,(05E7H)
0144: 0256 EB                     EX     DE,HL
0145: 0257 0E 15                  LD     C,scWriteSeq
0146: 0259 CD 8D 05               CALL   jpBDOS2
0147: 025C C9                     RET
0148: 025D
0149: 025D         ;     <New code fragment-----from 025D to 026F ( 26F :  623)>
0150: 025D         ;              ORG  025DH
0151: 025D             L025D:
0152: 025D 21 EA 05               LD     HL,05EAH
0153: 0260 70                     LD     (HL),B
0154: 0261 2B                     DEC    HL
0155: 0262 71                     LD     (HL),C
0156: 0263 2A E9 05               LD     HL,(05E9H)
0157: 0266 EB                     EX     DE,HL
0158: 0267 0E 16                  LD     C,scMakeFile
0159: 0269 CD 8D 05               CALL   jpBDOS2
0160: 026C 32 DE 05               LD     (osStatus),A
0161: 026F C9                     RET
0162: 0270
0163: 0270         ;     <New code fragment-----from 0270 to 02A5 ( 2A5 :  677)>
0164: 0270         ;              ORG  0270H
0165: 0270         ;L0270:
0166: 0270         ;--------------------   Move Data    -------------------------------
0167: 0270             MoveData:
0168: 0270         ; called with E  = Length.
0169: 0270         ;             BC = Destination
0170: 0270         ;             On Stack = Source
0171: 0270         ;
0172: 0270 21 EF 05               LD     HL,movSize           ; Size location Pointer
0173: 0273 73                     LD     (HL),E               ; Save size
0174: 0274 2B                     DEC    HL                   ; Destination location pointer
0175: 0275 70                     LD     (HL),B               ; Save location MSB
0176: 0276 2B                     DEC    HL
0177: 0277 71                     LD     (HL),C               ; Save location LSB
0178: 0278 2B                     DEC    HL                   ; Source  Location Pointer
0179: 0279 D1                     POP    DE                   ; Temporary get past return address
0180: 027A C1                     POP    BC                   ; Retrieve Source location
0181: 027B 70                     LD     (HL),B               ; Save location MSB
0182: 027C 2B                     DEC    HL
0183: 027D 71                     LD     (HL),C               ; Save location LSB
0184: 027E D5                     PUSH   DE                   ; Restore return address to stack
0185: 027F             MoveData1:
0186: 027F 3A EF 05               LD     A,(movSize)          ; Get the length
0187: 0282 3D                     DEC    A                    ; Adjust count
0188: 0283 32 EF 05               LD     (movSize),A          ; Put back
0189: 0286 FE FF                  CP     0FFH                 ; Did it go to Zero ?
0190: 0288 CA A6 02               JP     Z,DumbRet            ; Return if yes
0191: 028B
0192: 028B 2A EB 05               LD     HL,(movSrc)
0193: 028E E5                     PUSH   HL
0194: 028F 2A ED 05               LD     HL,(movDest)
0195: 0292 C1                     POP    BC
0196: 0293 0A                     LD     A,(BC)               ; Get byte from Source
0197: 0294 77                     LD     (HL),A               ; Put into Destination
0198: 0295 2A EB 05               LD     HL,(movSrc)
0199: 0298 23                     INC    HL                   ; Update pointers
0200: 0299 22 EB 05               LD     (movSrc),HL
0201: 029C 2A ED 05               LD     HL,(movDest)
0202: 029F 23                     INC    HL
0203: 02A0 22 ED 05               LD     (movDest),HL
0204: 02A3 C3 7F 02               JP     MoveData1
0205: 02A6
0206: 02A6         ;L02A6:
0207: 02A6             DumbRet:
0208: 02A6 C9                     RET
0209: 02A7         ;--------------------   Move Data    -------------------------------
0210: 02A7
0211: 02A7         ;     <New code fragment-----from 02A7 to 02CB ( 2CB :  715)>
0212: 02A7         ;              ORG  02A7H
0213: 02A7         ;L02A7:
0214: 02A7             errorExit:
0215: 02A7         ; entered with BC -> String message
0216: 02A7 21 F3 05               LD     HL,05F3H             ; Set up HL to store BC
0217: 02AA 70                     LD     (HL),B               ; Save MSB of message pointer
0218: 02AB 2B                     DEC    HL
0219: 02AC 71                     LD     (HL),C               ; Save LSB of Message buffer
0220: 02AD 01 28 01               LD     BC,LFCR
0221: 02B0 CD F7 01               CALL   printBC              ; Print New line
0222: 02B3 01 2B 01               LD     BC,msg1
0223: 02B6 CD F7 01               CALL   printBC              ; Print Error message on line xx
0224: 02B9 01 B6 05               LD     BC,LineNumber
0225: 02BC CD F7 01               CALL   printBC              ; Print Line Number
0226: 02BF 2A F2 05               LD     HL,(05F2H)
0227: 02C2 44                     LD     B,H
0228: 02C3 4D                     LD     C,L                  ; Get original error message
0229: 02C4 CD F7 01               CALL   printBC              ; Print it
0230: 02C7 2A F0 05               LD     HL,(CallerSP)
0231: 02CA F9                     LD     SP,HL                ; Restore the users stack
0232: 02CB C9                     RET
0233: 02CC
0234: 02CC         ;     <New code fragment-----from 02CC to 0308 ( 308 :  776)>
0235: 02CC         ;              ORG  02CCH
0236: 02CC             L02CC:
0237: 02CC             GrabComTail:
0238: 02CC 01 81 00               LD     BC,COMTAILCHARS      ; comtail$chars
0239: 02CF C5                     PUSH   BC
0240: 02D0 1E 7F                  LD     E,07FH               ; comtail max size
0241: 02D2 01 F4 05               LD     BC,comTailTemp
0242: 02D5 CD 70 02               CALL   MoveData
0243: 02D8 2A 80 00               LD     HL,(COMTAILCOUNT)    ; comtailCount
0244: 02DB 26 00                  LD     H,00H                ; HL = Comtail count
0245: 02DD 01 F4 05               LD     BC,comTailTemp       ; start of tail temp
0246: 02E0 09                     ADD    HL,BC                ; end of tail temp
0247: 02E1 36 00                  LD     (HL),00H             ; Terminate tail with 00
0248: 02E3 01 3A 01               LD     BC,txtSUB            ; Point at String SUB (source)
0249: 02E6 C5                     PUSH   BC                   ; Save for MoveData
0250: 02E7 1E 03                  LD     E,03H                ; Load string size
0251: 02E9 01 65 00               LD     BC,FCB1TYPE          ; Point at destination
0252: 02EC CD 70 02               CALL   MoveData             ; Insure FCB1 is type SUB
0253: 02EF 01 5C 00               LD     BC,FCB1              ; Point to FCB for the SUB file
0254: 02F2 CD 07 02               CALL   openBC               ; Open the file
0255: 02F5 3A DE 05               LD     A,(osStatus)         ; Get the return status
0256: 02F8 FE FF                  CP     0FFH                 ; Was it successful ?
0257: 02FA C2 03 03               JP     NZ,GrabComTail1      ;  skip if yes
0258: 02FD 01 3D 01               LD     BC,msg2              ; Load error message
0259: 0300 CD A7 02               CALL   errorExit            ; exit via error
0260: 0303             GrabComTail1:
0261: 0303 21 74 06               LD     HL,dmaIndex          ; Initialize pointer
0262: 0306 36 80                  LD     (HL),RECORDSIZE      ; Store CPM record size
0263: 0308 C9                     RET
0264: 0309
0265: 0309         ;     <New code fragment-----from 0309 to 031F ( 31F :  799)>
0266: 0309         ;              ORG  0309H
0267: 0309             getNextChar:
0268: 0309         ; Returns with next character in Acc
0269: 0309 3E 7F                  LD     A,07FH               ; End of record.
0270: 030B 21 74 06               LD     HL,dmaIndex
0271: 030E BE                     CP     M                    ; Exhausted the record
0272: 030F D2 25 03               JP     NC,getNextChar2      ; Skip if not
0273: 0312
0274: 0312 01 5C 00               LD     BC,FCB1              ; else read more
0275: 0315 CD 3D 02               CALL   readSeq              ; Read the SUB file
0276: 0318 FE 00                  CP     00H                  ; Is this the first read ?
0277: 031A CA 20 03               JP     Z,getNextChar1       ; Skip if yes
0278: 031D 3E 1A                  LD     A,01AH               ; else return with EOF
0279: 031F C9                     RET
0280: 0320
0281: 0320         ;-----------------------   Get next char from dma read buffer
0282: 0320         ;              ORG  0320H
0283: 0320         ;L0320:
0284: 0320             getNextChar1:
0285: 0320         ; returns char in Acc.
0286: 0320 21 74 06               LD     HL,dmaIndex          ; initialize the dmaIndex
0287: 0323 36 00                  LD     (HL),00H
0288: 0325         ;L0325:
0289: 0325             getNextChar2:
0290: 0325 3A 74 06               LD     A,(dmaIndex)         ; Get dmaIndex value
0291: 0328 3C                     INC    A                    ; Increment it
0292: 0329 32 74 06               LD     (dmaIndex),A         ; And put it back
0293: 032C 3D                     DEC    A                    ; Restore dmaIndexs original value
0294: 032D 4F                     LD     C,A
0295: 032E 06 00                  LD     B,00H                ; Record Index
0296: 0330 21 80 00               LD     HL,DMA               ; Pointer to read buffer
0297: 0333 09                     ADD    HL,BC                ; Point at current byte
0298: 0334
0299: 0334 7E                     LD     A,(HL)               ; Get byte from record
0300: 0335 32 75 06               LD     (currentChar1),A     ; Store it in currentChar1
0301: 0338 FE 0D                  CP     CR                   ; Is it carriage return ?
0302: 033A C2 62 03               JP     NZ,UpCase            ; Skip if not
0303: 033D
0304: 033D         ; else adjust the line number
0305: 033D 3A B8 05               LD     A,(LineNumber+2)
0306: 0340 3C                     INC    A
0307: 0341 32 B8 05               LD     (LineNumber+2),A     ; is the unit value
0308: 0344 4F                     LD     C,A
0309: 0345 3E 39                  LD     A,039H
0310: 0347 B9                     CP     C                    ;  > ASCII 9 ?
0311: 0348 D2 62 03               JP     NC,UpCase            ;   Skip  if not
0312: 034B 21 B8 05               LD     HL,LineNumber+2
0313: 034E 36 30                  LD     (HL),030H            ; Set the unit value to ASCII 0
0314: 0350 2B                     DEC    HL
0315: 0351 7E                     LD     A,(HL)               ; is the ten value
0316: 0352 3C                     INC    A
0317: 0353 77                     LD     (HL),A
0318: 0354 4F                     LD     C,A
0319: 0355 3E 39                  LD     A,039H               ;  > ASCII 9 ?
0320: 0357 B9                     CP     C
0321: 0358 D2 62 03               JP     NC,UpCase            ;   Skip  if not
0322: 035B 21 B7 05               LD     HL,LineNumber+1
0323: 035E 36 30                  LD     (HL),030H            ; ASCII 0
0324: 0360 2B                     DEC    HL                   ; Set the unit value to ASCII 0
0325: 0361 34                     INC    M                    ; Set the hundreds value to ASCII 0
0326: 0362             L0362:
0327: 0362             UpCase:
0328: 0362         ; make char upper case
0329: 0362 3A 75 06               LD     A,(currentChar1)     ; Get the char read
0330: 0365 D6 61                  SUB    61H                  ; Test against ASCII a
0331: 0367 FE 1A                  CP     01AH                 ; is it >  ASCII a
0332: 0369 D2 74 03               JP     NC,UpCase1           ; Skip if not
0333: 036C 3A 75 06               LD     A,(currentChar1)     ; get the original char
0334: 036F E6 5F                  AND    05FH                 ; make it upper case
0335: 0371 32 75 06               LD     (currentChar1),A     ; Put back into currentChar1
0336: 0374         ;L0374:
0337: 0374             UpCase1:
0338: 0374 3A 75 06               LD     A,(currentChar1)     ; Get currentChar1
0339: 0377 C9                     RET
0340: 0378         ;-----------------------   Get next char from dma read buffer
0341: 0378         ;     <New code fragment-----from 0378 to 0389 ( 389 :  905)>
0342: 0378         ;              ORG  0378H
0343: 0378             L0378:
0344: 0378 01 BB 05               LD     BC,fcbSUB
0345: 037B CD 4D 02               CALL   024DH
0346: 037E FE 00                  CP     00H
0347: 0380 CA 89 03               JP     Z,0389H
0348: 0383 01 53 01               LD     BC,msg3
0349: 0386 CD A7 02               CALL   errorExit            ; exit via error
0350: 0389             L0389:
0351: 0389 C9                     RET
0352: 038A
0353: 038A         ;     <New code fragment-----from 038A to 03E5 ( 3E5 :  997)>
0354: 038A         ;              ORG  038AH
0355: 038A             L038A:
0356: 038A 21 76 06               LD     HL,newBuffer
0357: 038D 36 00                  LD     (HL),00H             ;#? Set to 0000 - initialize
0358: 038F 21 00 00               LD     HL,0000H
0359: 0392 22 76 0E               LD     (newBufferIndex),HL  ;#? Set newBufferIndex to 0000
0360: 0395 21 7C 0E               LD     HL,passNumber
0361: 0398 36 01                  LD     (HL),01H             ;#? Set passNumber to 01
0362: 039A             L039A:
0363: 039A 3A 7C 0E               LD     A,(passNumber)       ; Get value #?
0364: 039D 1F                     RRA                         ; LSB Set ?
0365: 039E D2 80 04               JP     NC,DumbRet1          ; RET if LSB not Set
0366: 03A1
0367: 03A1 21 78 0E               LD     HL,commandIndex
0368: 03A4 36 00                  LD     (HL),00H             ; Init commandIndex
0369: 03A6
0370: 03A6
0371: 03A6             L03A6:
0372: 03A6 CD 09 03               CALL   getNextChar          ; Get a char
0373: 03A9 32 7D 0E               LD     (currentChar2),A     ; Save it
0374: 03AC D6 1A                  SUB    01AH                 ; ctrl-Z
0375: 03AE C6 FF                  ADD    A,0FFH
0376: 03B0 9F                     SBC    A,A
0377: 03B1 F5                     PUSH   AF                   ;#?  what ?
0378: 03B2 3A 7D 0E               LD     A,(currentChar2)     ; Get back the char retrieved
0379: 03B5 D6 0D                  SUB    CR                   ; carriage return
0380: 03B7 C6 FF                  ADD    A,0FFH
0381: 03B9 9F                     SBC    A,A                  ;#? What again
0382: 03BA C1                     POP    BC                   ; get 1st what
0383: 03BB 48                     LD     C,B                  ; both b and c are th same
0384: 03BC A1                     AND    C                    ; #?????
0385: 03BD 1F                     RRA
0386: 03BE D2 6B 04               JP     NC,046BH             ; Jump if 1A(EOF) or CR
0387: 03C1
0388: 03C1 3A 7D 0E               LD     A,(currentChar2)     ; Get back the char retrieved
0389: 03C4 FE 0A                  CP     LF                   ; Is it a Line Feed ?
0390: 03C6 CA 68 04               JP     Z,0468H              ;  Skip if yes
0391: 03C9 3A 7D 0E               LD     A,(currentChar2)     ; Get back the char retrieved
0392: 03CC FE 24                  CP     024H                 ; is it $
0393: 03CE C2 36 04               JP     NZ,0436H             ; skip if no
0394: 03D1         ; char is $
0395: 03D1 CD 09 03               CALL   getNextChar
0396: 03D4 32 7D 0E               LD     (currentChar2),A
0397: 03D7 FE 24                  CP     024H
0398: 03D9 C2 E6 03               JP     NZ,03E6H
0399: 03DC 2A 7D 0E               LD     HL,(currentChar2)
0400: 03DF 4D                     LD     C,L
0401: 03E0 CD C4 04               CALL   04C4H
0402: 03E3 C3 33 04               JP     0433H
0403: 03E6
0404: 03E6         ;     <New code fragment-----from 03E6 to 03FD ( 3FD : 1021)>
0405: 03E6         ;              ORG  03E6H
0406: 03E6             L03E6:
0407: 03E6 3A 7D 0E               LD     A,(currentChar2)
0408: 03E9 D6 30                  SUB    030H
0409: 03EB 32 7D 0E               LD     (currentChar2),A
0410: 03EE 4F                     LD     C,A
0411: 03EF 3E 09                  LD     A,09H
0412: 03F1 B9                     CP     C
0413: 03F2 D2 FE 03               JP     NC,03FEH
0414: 03F5 01 8D 01               LD     BC,msg6
0415: 03F8 CD A7 02               CALL   errorExit            ; exit via error
0416: 03FB C3 33 04               JP     0433H
0417: 03FE
0418: 03FE         ;     <New code fragment-----from 03FE to 041B ( 41B : 1051)>
0419: 03FE         ;              ORG  03FEH
0420: 03FE             L03FE:
0421: 03FE 21 7A 0E               LD     HL,0E7AH
0422: 0401 36 00                  LD     (HL),00H
0423: 0403 CD AD 04               CALL   04ADH
0424: 0406             L0406:
0425: 0406 3A 7D 0E               LD     A,(currentChar2)
0426: 0409 FE 00                  CP     00H
0427: 040B CA 22 04               JP     Z,0422H
0428: 040E 21 7D 0E               LD     HL,currentChar2
0429: 0411 35                     DEC    M
0430: 0412             L0412:
0431: 0412 CD 81 04               CALL   0481H
0432: 0415 1F                     RRA
0433: 0416 D2 1C 04               JP     NC,041CH
0434: 0419 C3 12 04               JP     0412H
0435: 041C
0436: 041C         ;     <New code fragment-----from 041C to 0421 ( 421 : 1057)>
0437: 041C         ;              ORG  041CH
0438: 041C             L041C:
0439: 041C CD AD 04               CALL   04ADH
0440: 041F C3 06 04               JP     0406H
0441: 0422
0442: 0422         ;     <New code fragment-----from 0422 to 0432 ( 432 : 1074)>
0443: 0422         ;              ORG  0422H
0444: 0422             L0422:
0445: 0422 CD 81 04               CALL   0481H
0446: 0425 1F                     RRA
0447: 0426 D2 33 04               JP     NC,0433H
0448: 0429 2A 79 0E               LD     HL,(0E79H)
0449: 042C 4D                     LD     C,L
0450: 042D CD C4 04               CALL   04C4H
0451: 0430 C3 22 04               JP     0422H
0452: 0433
0453: 0433         ;     <New code fragment-----from 0433 to 0435 ( 435 : 1077)>
0454: 0433         ;              ORG  0433H
0455: 0433             L0433:
0456: 0433 C3 68 04               JP     0468H
0457: 0436
0458: 0436         ;     <New code fragment-----from 0436 to 0455 ( 455 : 1109)>
0459: 0436         ;              ORG  0436H
0460: 0436             L0436:
0461: 0436 3A 7D 0E               LD     A,(currentChar2)     ; Get back the char retrieved
0462: 0439 FE 5E                  CP     05EH                 ; Is it a Caret ^ (^s = ctrl-X)
0463: 043B C2 61 04               JP     NZ,0461H             ; Skip if if caret
0464: 043E         ; here after a caret
0465: 043E CD 09 03               CALL   getNextChar
0466: 0441 D6 61                  SUB    061H
0467: 0443 32 7D 0E               LD     (currentChar2),A
0468: 0446 4F                     LD     C,A
0469: 0447 3E 19                  LD     A,019H
0470: 0449 B9                     CP     C
0471: 044A D2 56 04               JP     NC,0456H
0472: 044D 01 9D 01               LD     BC,msg7
0473: 0450 CD A7 02               CALL   errorExit            ; exit via error
0474: 0453 C3 5E 04               JP     045EH
0475: 0456
0476: 0456         ;     <New code fragment-----from 0456 to 045D ( 45D : 1117)>
0477: 0456         ;              ORG  0456H
0478: 0456             L0456:
0479: 0456 3A 7D 0E               LD     A,(currentChar2)
0480: 0459 3C                     INC    A
0481: 045A 4F                     LD     C,A
0482: 045B CD C4 04               CALL   04C4H
0483: 045E
0484: 045E         ;     <New code fragment-----from 045E to 0460 ( 460 : 1120)>
0485: 045E         ;              ORG  045EH
0486: 045E             L045E:
0487: 045E C3 68 04               JP     0468H
0488: 0461
0489: 0461         ;     <New code fragment-----from 0461 to 0467 ( 467 : 1127)>
0490: 0461         ;              ORG  0461H
0491: 0461             L0461:
0492: 0461 2A 7D 0E               LD     HL,(currentChar2)    ; Get back the char retrieved in L
0493: 0464 4D                     LD     C,L                  ; move it to C
0494: 0465 CD C4 04               CALL   04C4H
0495: 0468
0496: 0468         ;     <New code fragment-----from 0468 to 046A ( 46A : 1130)>
0497: 0468         ;              ORG  0468H
0498: 0468             L0468:
0499: 0468 C3 A6 03               JP     03A6H
0500: 046B
0501: 046B         ;     <New code fragment-----from 046B to 047F ( 47F : 1151)>
0502: 046B         ;              ORG  046BH
0503: 046B             L046B:
0504: 046B 3A 7D 0E               LD     A,(currentChar2)
0505: 046E D6 0D                  SUB    0DH
0506: 0470 D6 01                  SUB    01H
0507: 0472 9F                     SBC    A,A
0508: 0473 32 7C 0E               LD     (passNumber),A
0509: 0476 2A 78 0E               LD     HL,(commandIndex)    ; Get commandIndex value
0510: 0479 4D                     LD     C,L
0511: 047A CD C4 04               CALL   04C4H
0512: 047D C3 9A 03               JP     039AH
0513: 0480
0514: 0480         ;     <New code fragment-----from 0480 to 0480 ( 480 : 1152)>
0515: 0480         ;              ORG  0480H
0516: 0480         ;L0480:
0517: 0480             DumbRet1:
0518: 0480 C9                     RET
0519: 0481
0520: 0481         ;     <New code fragment-----from 0481 to 04A9 ( 4A9 : 1193)>
0521: 0481         ;              ORG  0481H
0522: 0481             L0481:
0523: 0481 2A 7A 0E               LD     HL,(0E7AH)
0524: 0484 26 00                  LD     H,00H
0525: 0486 01 F4 05               LD     BC,comTailTemp
0526: 0489 09                     ADD    HL,BC
0527: 048A 7E                     LD     A,(HL)
0528: 048B 32 79 0E               LD     (0E79H),A
0529: 048E D6 20                  SUB    020H
0530: 0490 D6 01                  SUB    01H
0531: 0492 9F                     SBC    A,A
0532: 0493 F5                     PUSH   AF
0533: 0494 3A 79 0E               LD     A,(0E79H)
0534: 0497 D6 00                  SUB    00H
0535: 0499 D6 01                  SUB    01H
0536: 049B 9F                     SBC    A,A
0537: 049C C1                     POP    BC
0538: 049D 48                     LD     C,B
0539: 049E B1                     OR     C
0540: 049F 1F                     RRA
0541: 04A0 DA AA 04               JP     C,04AAH
0542: 04A3 21 7A 0E               LD     HL,0E7AH
0543: 04A6 34                     INC    M
0544: 04A7 3E 01                  LD     A,01H
0545: 04A9 C9                     RET
0546: 04AA
0547: 04AA         ;     <New code fragment-----from 04AA to 04AC ( 4AC : 1196)>
0548: 04AA         ;              ORG  04AAH
0549: 04AA             L04AA:
0550: 04AA 3E 00                  LD     A,00H
0551: 04AC C9                     RET
0552: 04AD
0553: 04AD         ;     <New code fragment-----from 04AD to 04C2 ( 4C2 : 1218)>
0554: 04AD         ;              ORG  04ADH
0555: 04AD             L04AD:
0556: 04AD 2A 7A 0E               LD     HL,(0E7AH)
0557: 04B0 26 00                  LD     H,00H
0558: 04B2 01 F4 05               LD     BC,comTailTemp
0559: 04B5 09                     ADD    HL,BC
0560: 04B6 7E                     LD     A,(HL)
0561: 04B7 FE 20                  CP     020H
0562: 04B9 C2 C3 04               JP     NZ,04C3H
0563: 04BC 21 7A 0E               LD     HL,0E7AH
0564: 04BF 34                     INC    M
0565: 04C0 C3 AD 04               JP     04ADH
0566: 04C3
0567: 04C3         ;     <New code fragment-----from 04C3 to 04C3 ( 4C3 : 1219)>
0568: 04C3         ;              ORG  04C3H
0569: 04C3             L04C3:
0570: 04C3 C9                     RET
0571: 04C4
0572: 04C4         ;     <New code fragment-----from 04C4 to 04FD ( 4FD : 1277)>
0573: 04C4         ;              ORG  04C4H
0574: 04C4             L04C4:
0575: 04C4         ; Called with c = value to work on
0576: 04C4 21 7B 0E               LD     HL,currentChar3
0577: 04C7 71                     LD     (HL),C               ; Save the value in currentChar3
0578: 04C8 2A 76 0E               LD     HL,(newBufferIndex)  ; Get value from newBufferIndex
0579: 04CB 23                     INC    HL                   ; Increment it
0580: 04CC 22 76 0E               LD     (newBufferIndex),HL  ; Put it back
0581: 04CF 11 FF 07               LD     DE,07FFH
0582: 04D2 CD 99 05               CALL   HLminusDE            ; Did we overflow Command buffer ?
0583: 04D5 D2 DE 04               JP     NC,04DEH             ; Skip if not
0584: 04D8
0585: 04D8 01 64 01               LD     BC,msg4              ; Command buffer overflow
0586: 04DB CD A7 02               CALL   errorExit            ; exit via error
0587: 04DE             L04DE:
0588: 04DE 2A 76 0E               LD     HL,(newBufferIndex)  ; Get value from newBufferIndex
0589: 04E1 01 76 06               LD     BC,newBuffer         ; Base of newBuffer
0590: 04E4 09                     ADD    HL,BC
0591: 04E5 3A 7B 0E               LD     A,(currentChar3)     ; Get the working value
0592: 04E8 77                     LD     (HL),A               ; Put it in Buffer ?
0593: 04E9
0594: 04E9 3A 78 0E               LD     A,(commandIndex)     ; Get value for commandIndex
0595: 04EC 3C                     INC    A                    ; Increment it
0596: 04ED 32 78 0E               LD     (commandIndex),A     ; Put it back
0597: 04F0
0598: 04F0 4F                     LD     C,A
0599: 04F1 3E 7D                  LD     A,07DH               ; Max size for command
0600: 04F3 B9                     CP     C
0601: 04F4 D2 FD 04               JP     NC,DumbRet2          ; Return if size OK
0602: 04F7 01 7C 01               LD     BC,msg5              ; Command too long
0603: 04FA CD A7 02               CALL   errorExit            ; exit via error
0604: 04FD             DumbRet2:
0605: 04FD C9                     RET
0606: 04FE
0607: 04FE         ;     <New code fragment-----from 04FE to 055E ( 55E : 1374)>
0608: 04FE         ;              ORG  04FEH
0609: 04FE             L04FE:
0610: 04FE 01 BB 05               LD     BC,fcbSUB
0611: 0501 CD 2D 02               CALL   022DH
0612: 0504 21 DB 05               LD     HL,05DBH
0613: 0507 36 00                  LD     (HL),00H
0614: 0509 01 BB 05               LD     BC,fcbSUB
0615: 050C CD 5D 02               CALL   025DH
0616: 050F 3A DE 05               LD     A,(osStatus)
0617: 0512 FE FF                  CP     0FFH
0618: 0514 C2 1D 05               JP     NZ,051DH
0619: 0517 01 B7 01               LD     BC,msg8
0620: 051A CD A7 02               CALL   02A7H
0621: 051D             L051D:
0622: 051D CD 7A 05               CALL   057AH
0623: 0520 32 7E 0E               LD     (0E7EH),A
0624: 0523 FE 00                  CP     00H
0625: 0525 CA 65 05               JP     Z,0565H
0626: 0528 3A 7E 0E               LD     A,(0E7EH)
0627: 052B 32 80 00               LD     (0080H),A            ;#? COMTAILCOUNT
0628: 052E 4F                     LD     C,A
0629: 052F 06 00                  LD     B,00H
0630: 0531 21 81 00               LD     HL,0081H
0631: 0534 09                     ADD    HL,BC
0632: 0535 36 00                  LD     (HL),00H
0633: 0537 2A 7E 0E               LD     HL,(0E7EH)
0634: 053A 26 00                  LD     H,00H
0635: 053C 01 82 00               LD     BC,0082H
0636: 053F 09                     ADD    HL,BC
0637: 0540 36 24                  LD     (HL),024H
0638: 0542             L0542:
0639: 0542 3E 00                  LD     A,00H
0640: 0544 21 7E 0E               LD     HL,0E7EH
0641: 0547 BE                     CP     M
0642: 0548 D2 5F 05               JP     NC,055FH
0643: 054B CD 7A 05               CALL   057AH
0644: 054E 2A 7E 0E               LD     HL,(0E7EH)
0645: 0551 26 00                  LD     H,00H
0646: 0553 01 80 00               LD     BC,0080H             ;#? COMTAILCOUNT/RECORDSIZE
0647: 0556 09                     ADD    HL,BC
0648: 0557 77                     LD     (HL),A
0649: 0558 21 7E 0E               LD     HL,0E7EH
0650: 055B 35                     DEC    M
0651: 055C C3 42 05               JP     0542H
0652: 055F
0653: 055F         ;     <New code fragment-----from 055F to 0564 ( 564 : 1380)>
0654: 055F         ;              ORG  055FH
0655: 055F             L055F:
0656: 055F CD 78 03               CALL   0378H
0657: 0562 C3 1D 05               JP     051DH
0658: 0565
0659: 0565         ;     <New code fragment-----from 0565 to 0579 ( 579 : 1401)>
0660: 0565         ;              ORG  0565H
0661: 0565             L0565:
0662: 0565 01 BB 05               LD     BC,fcbSUB
0663: 0568 CD 1A 02               CALL   021AH
0664: 056B 3A DE 05               LD     A,(osStatus)
0665: 056E FE FF                  CP     0FFH
0666: 0570 C2 79 05               JP     NZ,0579H
0667: 0573 01 C6 01               LD     BC,msg9
0668: 0576 CD A7 02               CALL   02A7H
0669: 0579             L0579:
0670: 0579 C9                     RET
0671: 057A
0672: 057A         ;     <New code fragment-----from 057A to 0586 ( 586 : 1414)>
0673: 057A         ;              ORG  057AH
0674: 057A             L057A:
0675: 057A 2A 76 0E               LD     HL,(newBufferIndex)
0676: 057D 2B                     DEC    HL
0677: 057E 22 76 0E               LD     (newBufferIndex),HL
0678: 0581 01 76 06               LD     BC,newBuffer
0679: 0584 09                     ADD    HL,BC
0680: 0585 7E                     LD     A,(HL)
0681: 0586 C9                     RET
0682: 0587
0683: 0587         ;     <New code fragment-----from 0587 to 0589 ( 589 : 1417)>
0684: 0587         ;              ORG  0587H
0685: 0587             jpWBOOT:
0686: 0587 C3 00 00               JP     WBOOT
0687: 058A
0688: 058A         ;     <New code fragment-----from 058A to 058C ( 58C : 1420)>
0689: 058A         ;              ORG  058AH
0690: 058A             jpBDOS1:
0691: 058A C3 05 00               JP     BDOS
0692: 058D
0693: 058D         ;     <New code fragment-----from 058D to 058F ( 58F : 1423)>
0694: 058D         ;              ORG  058DH
0695: 058D             jpBDOS2:
0696: 058D C3 05 00               JP     BDOS
0697: 0590
0698: 0590         ;     <New unknown fragment-----from 0590 to 0598 ( 598 : 1432)>
0699: 0590         ;              ORG  0590H
0700: 0590                        DS     0009H
0701: 0599
0702: 0599         ;     <New code fragment-----from 0599 to 059F ( 59F : 1439)>
0703: 0599                        ORG    0599H
0704: 0599         ;----------------------------HLminusDE
0705: 0599             L0599:
0706: 0599             HLminusDE:
0707: 0599 7B                     LD     A,E
0708: 059A 95                     SUB    L
0709: 059B 6F                     LD     L,A
0710: 059C 7A                     LD     A,D
0711: 059D 9C                     SBC    A,H
0712: 059E 67                     LD     H,A
0713: 059F C9                     RET
0714: 05A0         ;----------------------------HLminusDE
0715: 05A0
0716: 05A0
0717: 05A0         ;     <New unknown fragment-----from 05A0 to 05FF ( 5FF : 1535)>
0718: 05A0         ;              ORG  05A0H
0719: 05A0         ;			DS		27
0720: 05A0                        ORG    05B6H
0721: 05B6         ;L05B6:
0722: 05B6             LineNumber:
0723: 05B6 30 30 31 20 24                DB     '001 $'
0724: 05BB
0725: 05BB                        ORG    05BBH
0726: 05BB 00 24 24 24 20 20 20 20 2E 53 55 42     fcbSUB:    DB     0,'$$$    .SUB'
0727: 05C7
0728: 05C7
0729: 05C7                        ORG    05DCH
0730: 05DC         ;L5DC:
0731: 05DC                        DS     1                    ; MSB of message pointer (1F7)
0732: 05DD         ;L5DD:
0733: 05DD                        DS     1                    ; LSB of message pointer
0734: 05DE         ;L5DE:
0735: 05DE             osStatus:
0736: 05DE                        DS     1                    ; #?
0737: 05DF
0738: 05DF                        ORG    05DFH
0739: 05DF         ;L5DF:
0740: 05DF                        DS     1                    ; MSB of FCB pointer (207)
0741: 05E0         ;L5E0:
0742: 05E0                        DS     1                    ; LSB of FCB pointer
0743: 05E1
0744: 05E1
0745: 05E1
0746: 05E1                        ORG    05EBH
0747: 05EB         ;------- moveData Variables -------
0748: 05EB             movSrc:    DS     2                    ; Source pointer  for move
0749: 05ED             movDest:   DS     2                    ; Destination pointer for Move
0750: 05EF             movSize:   DS     1                    ; Size of the remaining move
0751: 05F0
0752: 05F0         ;			ORG		05F0H
0753: 05F0 00 00       CallerSP:  DW     0000
0754: 05F2
0755: 05F2         ;L5F2:
0756: 05F2                        DS     1                    ; MSB of message pointer (2A7)
0757: 05F3         ;L5F3:
0758: 05F3                        DS     1                    ; LSB of message pointer
0759: 05F4
0760: 05F4         ;L5F4:
0761: 05F4             comTailTemp:
0762: 05F4                        DS     07FH
0763: 0673
0764: 0673                        ORG    0674H
0765: 0674         ;L0674H:
0766: 0674             dmaIndex:
0767: 0674             flag1:
0768: 0674 00                     DB     00H                  ; index into DMA record
0769: 0675         ;L0675H:
0770: 0675             currentChar1:
0771: 0675                        DS     1
0772: 0676
0773: 0676         ;			ORG		0676H
0774: 0676             L0676H:
0775: 0676             newBuffer:
0776: 0676         ;			DS		?
0777: 0676
0778: 0676                        ORG    0E93H
0779: 0E93             TopOfStack:
0780: 0E93
0781: 0E93
0782: 0E93                        ORG    0E76H
0783: 0E76             L0E76H:
0784: 0E76             newBufferIndex:
0785: 0E76                        DS     2
0786: 0E78             L0E78H:
0787: 0E78             commandIndex:
0788: 0E78                        DS     1
0789: 0E79
0790: 0E79                        DS     2
0791: 0E7B             L0E7BH:
0792: 0E7B             currentChar3:
0793: 0E7B                        DS     1
0794: 0E7C         ;L0E7CH:
0795: 0E7C             passNumber:
0796: 0E7C                        DS     1
0797: 0E7D         ;L0E7DH:
0798: 0E7D             currentChar2:
0799: 0E7D                        DS     1
0800: 0E7E
0801: 0E7E             EndOfCode:
           ************************   Xref   ************************
0000: $               0E7D
0015: BDOS            0005   0691 0696
0008: BELL            0007
0753: CallerSP        05F0   0061 0230
0787: commandIndex    0E78   0367 0509 0594 0596
0018: COMTAIL         0080   0019
0020: COMTAILCHARS    0081   0238
0019: COMTAILCOUNT    0080   0020 0243
0761: comTailTemp     05F4   0241 0245 0525 0558
0010: CR              000D   0301 0379
0770: currentChar1    0675   0300 0329 0333 0335 0338
0798: currentChar2    0E7D   0373 0378 0388 0391 0396 0399 0407 0409 0425 0428 0461 0467 0479 0492 0504
0792: currentChar3    0E7B   0576 0591
0022: DMA             0080   0296
0766: dmaIndex        0674   0261 0270 0286 0290 0292
0011: DOLLAR          0024
0207: DumbRet         02A6   0190
0517: DumbRet1        0480   0365
0604: DumbRet2        04FD   0601
0801: EndOfCode       0E7E
0214: errorExit       02A7   0259 0349 0415 0473 0586 0603
0016: FCB1            005C   0253 0274
0017: FCB1TYPE        0065   0251
0726: fcbSUB          05BB   0344 0610 0614 0662
0767: flag1           0674
0267: getNextChar     0309   0372 0395 0465
0284: getNextChar1    0320   0277
0289: getNextChar2    0325   0272
0237: GrabComTail     02CC   0064
0260: GrabComTail1    0303   0257
0706: HLminusDE       0599   0582
0690: jpBDOS1         058A   0079 0120
0695: jpBDOS2         058D   0092 0106 0133 0146 0159
0685: jpWBOOT         0587   0067
0098: L021A           021A
0112: L022D           022D
0138: L024D           024D
0151: L025D           025D
0236: L02CC           02CC
0326: L0362           0362
0343: L0378           0378
0350: L0389           0389
0355: L038A           038A
0362: L039A           039A
0371: L03A6           03A6
0406: L03E6           03E6
0420: L03FE           03FE
0424: L0406           0406
0430: L0412           0412
0438: L041C           041C
0444: L0422           0422
0455: L0433           0433
0460: L0436           0436
0478: L0456           0456
0486: L045E           045E
0491: L0461           0461
0498: L0468           0468
0503: L046B           046B
0522: L0481           0481
0549: L04AA           04AA
0555: L04AD           04AD
0569: L04C3           04C3
0574: L04C4           04C4
0587: L04DE           04DE
0609: L04FE           04FE
0621: L051D           051D
0638: L0542           0542
0655: L055F           055F
0661: L0565           0565
0669: L0579           0579
0674: L057A           057A
0705: L0599           0599
0774: L0676H          0676
0783: L0E76H          0E76
0786: L0E78H          0E78
0791: L0E7BH          0E7B
0009: LF              000A   0389
0044: LFCR            0128   0220
0722: LineNumber      05B6   0224 0305 0307 0312 0322
0749: movDest         05ED   0194 0201 0203
0167: MoveData        0270   0242 0252
0185: MoveData1       027F   0204
0750: movSize         05EF   0172 0186 0188
0748: movSrc          05EB   0192 0198 0200
0043: msg0            0103
0045: msg1            012B   0222
0047: msg2            013D   0258
0048: msg3            0153   0348
0049: msg4            0164   0585
0050: msg5            017C   0602
0051: msg6            018D   0414
0052: msg7            019D   0472
0053: msg8            01B7   0619
0054: msg9            01C6   0667
0775: newBuffer       0676   0356 0589 0678
0784: newBufferIndex  0E76   0359 0578 0580 0588 0675 0677
0006: NULL            0000
0083: openBC          0207   0254
0735: osStatus        05DE   0093 0107 0160 0255 0616 0664
0795: passNumber      0E7C   0360 0363 0508
0071: printBC         01F7   0221 0223 0225 0229
0012: QMARK           003F
0125: readSeq         023D   0275
0023: RECORDSIZE      0080   0262
0027: scCloseFile     0010   0105
0028: scDeleteFile    0013   0119
0031: scMakeFile      0016   0158
0026: scOpenFile      000F   0091
0025: scPrintString   0009   0078
0029: scReadSeq       0014   0132
0030: scWriteSeq      0015   0145
0007: SOH             0001
0058: Start           01DF   0038
0779: TopOfStack      0E93   0062
0046: txtSUB          013A   0248
0327: UpCase          0362   0302 0311 0321
0337: UpCase1         0374   0332
0014: WBOOT           0000   0686
